---
- hosts: cm
  remote_user: root
  vars_files:
    - external_vars.yml

  tasks:
    - name: Check CM API
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/clusters"
        method: GET
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: results

    - debug:
        var: results

    - name: Cluster Name
      set_fact:  
        cluster_name:  "{{ results.json | json_query(jmesquery) }}"
      vars:
        jmesquery: "items[0].name"

    - name: Check CM API2
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/clusters/{{ cluster_name }}/kerberosInfo/"
        method: GET
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: kerberos

    - debug:
        var: kerberos.json.kerberized

    - name: Check CM config
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/cm/config/"
        method: GET
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config

    - name: Set CM config
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/cm/config/"
        method: PUT
        return_content: yes
        body: "{ \"items\" : [ { \"name\" : \"SECURITY_REALM\", \"value\" : \"{{ REALM }}\" }, { \"name\" : \"KDC_HOST\", \"value\" : \"{{ KDC_HOST }}\" }, { \"name\" : \"KRB_ENC_TYPES\", \"value\" : \"{{ KRB_ENC_TYPES }}\" }, { \"name\" : \"KDC_ADMIN_HOST\", \"value\" : \"{{ KDC_HOST }}\" }, { \"name\" : \"KRB_MANAGE_KRB5_CONF\", \"value\" : true } ]}"
        body_format: json
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_set
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_set

    - name: CM services stop
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/clusters/{{ cluster_name }}/commands/stop"
        method: POST
        return_content: yes
        body_format: form-urlencoded
        body:
          clustername: '{{ cluster_name }}'
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_servicesStop
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_servicesStop

    - name: CM Mgmt services stop
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/cm/service/commands/stop"
        method: POST
        return_content: yes
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_mgmtServiceStop
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_mgmtServiceStop

    - name: Check CM Services Stopped
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/clusters"
        method: GET
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: results
      until: results.json['items'][0].entityStatus == "STOPPED"
      retries: 10
      delay: 30

    - debug:
        var: results.json['items'][0]

    - name: CM config importAdminCredentials
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/cm/commands/importAdminCredentials?password={{ adm_var.password }}&username={{ adm_var.principal }}@{{ REALM }}"
        method: POST
        return_content: yes
        body_format: form-urlencoded
        body:
          username: '{{ adm_var.principal }}@{{ REALM }}'
          password: '{{ adm_var.password }}'
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_importAdminCredentials
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_importAdminCredentials

    - name: Set CM ApiConfigureForKerberosArguments
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/clusters/{{ cluster_name }}/commands/configureForKerberos?clusterName={{ cluster_name }}"
        method: POST
        return_content: yes
        body: "{ \"datanodeTransceiverPort\" : {{ cm_vars.datanodeTransceiverPort }}, \"datanodeWebPort\" : {{ cm_vars.datanodeWebPort }} }"
        body_format: json
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_apiConfigureForKerberos
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_apiConfigureForKerberos

    - name: CM config generateCredentials
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/cm/commands/generateCredentials"
        method: POST
        return_content: yes
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_generateCredentials
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_generateCredentials

    - name: Pause for 2 minutes to generate credentials
      pause:
        minutes: 2

    - name: CM services Start
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/clusters/{{ cluster_name }}/commands/start"
        method: POST
        return_content: yes
        body_format: form-urlencoded
        body:
          clustername: '{{ cluster_name }}'
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_servicesStart
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_servicesStart

    - name: CM Mgmt services Start
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/cm/service/commands/start"
        method: POST
        return_content: yes
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_mgmtServiceStart
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_mgmtServiceStart

    - name: Check CM Services Started in GOOD_HEALTH
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/clusters"
        method: GET
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: results
      until: results.json['items'][0].entityStatus == "GOOD_HEALTH"
      retries: 10
      delay: 30

    - debug:
        var: results.json['items'][0]


    - name: CM Redeploy Client config
      uri:
        url: "{{ cm_vars.cm_protocol }}://{{ cm_vars.cm_host }}:{{ cm_vars.cm_port }}/api/{{ cm_vars.cm_api_version }}/clusters/{{ cluster_name }}/commands/deployClientConfig?clustername={{ cluster_name }}"
        method: POST
        return_content: yes
        validate_certs: no
        url_username: "{{ cm_vars.cm_user }}"
        url_password: "{{ cm_vars.cm_password }}"
      register: cm_config_redeployClientConfig
      #when: kerberos.json.kerberized == false

    - debug:
        var: cm_config_redeployClientConfig

